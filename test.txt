Run options: include {:focus=>true}

All examples were filtered out; ignoring {:focus=>true}

CheckinProcedure
  should belong to equipment_model

Cart
  has a working factory
  General validations
    should require reserver_id to be set
    should require start_date to be set
    should require due_date to be set
  Reservation date changes
    .set_due_date
      sets new due dates for all items in cart
    .set_start_date
      does not set a past date as start date
      sets new start and due dates for all items in cart
    .fix_due_date
      sets due date as start_date + 1 if due date precedes start date
      does not affect due date when due date does not precede start date
  Aliases
    .cart_reservations
      finds items
    .models_with_quantities
      gets the correct count of models
    .reserver
      should return a correct user instance
    .duration
      should calculate the sum correctly
  .set_reserver_id
    should flag every CartReservation with passed user_id
  .persisted?
    should be false
  .initialize
    has no items
    has no reserver
    is due tomorrow
    starts today
    has errors
  .empty?
    is true when there are no items in cart
    is false when there are some items in cart
  Item handling
    .add_item
      adds an item
    .remove_item
      removes an item from cart
      removes a CartReservation from database
      removes the right model from cart

EquipmentObjectsController
  GET index
    with admin user
      should respond with 200
      should render template matcher "index"
      should not set the flash
      without show deleted
        with @equipment_model set
          should populate an array of all active model-type equipment objects
        without @equipment_model set
          should populate an array of all active equipment objects (FAILED - 1)
      with show deleted
        with @equipment_model set
          should populate an array of all model-type equipment objects
        without @equipment_model set
          should populate an array of all equipment objects (FAILED - 2)
    with checkout person user
      should respond with 200
      should render template matcher "index"
    with non-admin user
      should redirect to root
  DELETE destroy
    with admin user
      should remove object from database
      
        should set the flash
        should redirect to #<EquipmentModel id: 82, name: "Name150", description: "This is a model", late_fee: #<BigDecimal:8eab408,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8eab340,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 84, created_at: "2014-06-19 20:51:32", updated_at: "2014-06-19 20:51:32", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>
        sets @equipment_object to selected object
    with non-admin user
      should redirect to root
  GET edit
    with admin user
      should respond with 200
      should render template matcher "edit"
      sets @equipment_object to selected object
      should not set the flash
    with non-admin user
      should redirect to root
  GET new
    with admin user
      should respond with 200
      sets equipment_model when one is passed through params
      assigns a new equipment object to @equipment_object
      should not set the flash
      should render template matcher "new"
      sets equipment_model to nil when no equipment model is specified
    with non-admin user
      should redirect to root
  GET show
    with admin user
      should respond with 200
      should render template matcher "show"
      should set to correct equipment object
      should not set the flash
    with non-admin user
      should redirect to root
  PUT update
    with admin user
      with valid attributes
        should set the flash
        sets @equipment_object to selected object
        should redirect to #<EquipmentModel id: 104, name: "Name216", description: "This is a model", late_fee: #<BigDecimal:82c4108,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:82c3ff0,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 106, created_at: "2014-06-19 20:51:35", updated_at: "2014-06-19 20:51:35", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>
        updates attributes
      without valid attributes
        should not set the flash
        should not update attributes
        should render template matcher "edit"
    with non-admin user
      should redirect to root
  POST create
    with admin user
      with valid attributes
        should save object
        should set the flash
        should change default serial to nil
        should redirect to #<EquipmentModel id: 113, name: "Name248", description: "This is a model", late_fee: #<BigDecimal:8d5dec0,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8d5de48,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 115, created_at: "2014-06-19 20:51:36", updated_at: "2014-06-19 20:51:36", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>
      without valid attributes
        should not set the flash
        should render template matcher "new"
        should render template matcher "new"
        should not save
    with non-admin user
      should redirect to root

Reservation
  should belong to equipment_model
  should require equipment_model to be set
  should belong to checkout_handler
  should belong to equipment_object
  should belong to reserver
  should belong to checkin_handler
  when valid
    should be valid
    should respond to #late_fee
    passes custom validations
    should respond to #max_renewal_length_available
    should save (FAILED - 3)
    should have a valid reserver
    should respond to #fake_reserver_id
    can be updated
    equipment_model
      should not be nil
    start_date
      should not be nil
    due_date
      should not be nil
  with no user
    should have a deleted user
    should be valid
  when overdue
    should be is eligible for renew
    status
      should == "overdue"
  when not checked out
    status
      should == "reserved"
  when missed
    status
      should == "missed"
  when checked in
    should not be is eligible for renew
    status
      should == "returned on time"
  with equipment model quantity problems
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 4)
    passes other custom validations
  when user has overdue reservation
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 5)
    passes other custom validations
  with equipment object/model matching problems
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 6)
    passes other custom validations
  when empty
    should not be valid
    should not save (FAILED - 7)
    updates with equipment model (FAILED - 8)
    cannot be updated
  with category quantity problems
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 9)
    passes other custom validations
  with past due date
    should not be valid
    updates with fixed date (FAILED - 10)
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 11)
    passes other custom validations
  when checked out
    should be is eligible for renew
    status
      should == "checked out"
  with duration problems
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 12)
    passes other custom validations
  with equipment object available problems
    passes other custom validations
  with blacked out start date
    should not be valid
    fails appropriate validations
    cannot be updated
    should not save (FAILED - 13)
    passes other custom validations

Category
  validates max_per_user must be non-negative
  validates max_renewal_times can be nil
  validates sort_order can be nil
  validates max_checkout_length must be an integer
  validates sort_order must be an integer
  validates max_checkout_length can be nil
  validates renewal_days_before_due must be an integer
  validates max_renewal_times must be an integer
  validates sort_order must be non-negative
  validates renewal_days_before_due can be nil
  validates max_renewal_length must be an integer
  validates max_renewal_times must be non-negative
  validates max_per_user can be nil
  should have many equipment_models
  validates max_per_user must be an integer
  validates renewal_days_before_due must be non-negative
  validates max_checkout_length must be non-negative
  should require name to be set
  validates max_renewal_length must be non-negative
  should require case sensitive unique value for name
  validates max_renewal_length can be nil
  .active
    Should return all active categories
    Should not return inactive categories
  .catalog_search
    Should return names matching all of the query words
    Should not return any categories without every query word in the name
  #maximum_renewal_days_before_due
    Should return maximum_renewal_days_before_due if defined
    Default to unrestricted if not defined
  #maximum_renewal_length
    Should return maximum_renewal_length if defined
    Default to 0 if not defined
  #maximum_per_user
    Should return maximum_per_user if defined
    Should return 'unrestricted' if not defined
  #maximum_checkout_length
    Should return maximum_checkout_length if defined
    Default to unrestricted if not defined
  #maximum_renewal_times
    Should return maximum_renewal_times if defined
    Default to unrestricted if not defined

Requirement
  Validations
    has a working factory (FAILED - 14)
    should have and belong to many users
    should require contact_info to be set
    should require description to be set
    should require contact_name to be set
    should have and belong to many equipment_models
  #list_requirement_admins
    should return a list of admins and contact info if no requirements have been met. (FAILED - 15)
    should return a list of met requirements, followed by unmet requirements if they exists (FAILED - 16)

AppConfig
  has a working factory
  has an attachment that is of the favicon format
  shouldn't have an invalid e-mail
  does not accept too long a site title
  does not accept empty site title
  should have a valid and present e-mail

RequirementsController
  GET index
    is admin
      example at ./spec/controllers/requirements_controller_spec.rb:19 (FAILED - 17)
      example at ./spec/controllers/requirements_controller_spec.rb:20 (FAILED - 18)
      should populate an array of all requirements (FAILED - 19)
      should not set the flash
    not an admin
      should redirect to root url if not an admin
  DELETE destroy
    is admin
      assigns the selected requirement to @requirement
      removes @requirement from the database
      should redirect to the requirements index page
    not admin
      should redirect to root url if not an admin
  PUT update
    is admin
      with valid attributes
        should set @requirement to the correct requirement
        should update the attributes of @requirement
        should set the flash
        should redirect to #<Requirement id: 24, equipment_model_id: nil, contact_name: "Adam Bray", contact_info: "adam.bray@yale.edu", deleted_at: nil, notes: nil, created_at: "2014-06-19 20:51:50", updated_at: "2014-06-19 20:51:50", description: "You must attend a training session with Adam before...">
      with invalid attributes
        should not update the attributes of @requirement
        should render template matcher "edit"
        should not set the flash
    not admin
      should redirect to root url if not an admin
  GET new
    is admin
      should respond with 200
      should render template matcher "new"
      assigns a new requirement to @requirement
      should not set the flash
    not an admin
      should redirect to root url if not an admin
  GET show
    is an admin
      should respond with 200
      should render template matcher "show"
      should set @requirement to the selected requirement
      should not set the flash
    not an admin
      should redirect to root url if not an admin
  POST create
    is admin
      with valid attributes
        saves a new requirement
        should redirect to #<Requirement id: 48, equipment_model_id: nil, contact_name: "Adam Bray", contact_info: "adam.bray@yale.edu", deleted_at: nil, notes: nil, created_at: "2014-06-19 20:51:51", updated_at: "2014-06-19 20:51:51", description: "You must attend a training session with Adam before...">
        should set the flash
      with invalid attributes
        fails to save a new requirment
        should not set the flash
        should render template matcher "new"
    not admin
      should redirect to root url if not an admin
  GET edit
    is admin
      should set @requirement to the selected requirement
      should respond with 200
      should not set the flash
      should render template matcher "edit"
    not admin
      should redirect to root url if not an admin

Blackout
  validations and associations
    should require notice to be set
    validates a set_id if it is a recurring blackout (PENDING: Not yet implemented)
    should require equipment_model_id to be set
    should require end_date to be set
    should require start_date to be set
    should belong to equipment_model
    should require blackout_type to be set
  .blackouts_on_date
    Should return the blackout blocking a passed date if exists
    Should return nil if the date is not blacked out
    Should return an array if multiple blackouts cover date
  .hard_blackout_exists_on_date
    Should return true if there is a hard blackout on the given date
    Should return false if there is a soft blackout or no blackout on the given date

AdminMailer
  Notes Reservation Notification
    behaves like admin email
      is only sent to one address
      is to the admin
      delivers

ContactController
  GET new
    should assign @message to a new message
    should respond with 200
    should not set the flash
    should render template matcher "new"
  POST create
    with valid attributes
      sends a message (FAILED - 20)
      should redirect to "/"
      should set the flash
    with invalid attributes
      should render template matcher "new"
      should set the flash
      should not send a message

EquipmentModelsController
  GET index
    with admin user
      should respond with 200
      should render template matcher "index"
      should not set the flash
      without show deleted
        with @category set
          should populate an array of of active category-type equipment models
        without @category set
          should populate an array of all active equipment models (FAILED - 21)
      with show deleted
        with @category set
          should populate an array of category-type equipment models
        without @category set
          should populate an array of all equipment models (FAILED - 22)
    with non-admin user
      should function normally
        should respond with 200
        should render template matcher "index"
  DELETE destroy
    with admin user
      should remove model from database
      
        sets @equipment_object to selected model
        should set the flash
        should redirect to "http://test.host/equipment_models"
    with non-admin user
      DELETE destroy should redirect to root
  POST create
    with admin user
      with valid attributes
        should save model
        should set the flash
        should redirect to #<EquipmentModel id: 227, name: "Name598", description: "This is a model", late_fee: #<BigDecimal:83f42d0,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:83f4258,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 279, created_at: "2014-06-19 20:51:57", updated_at: "2014-06-19 20:51:57", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>
      without valid attributes
        should set the flash
        should render template matcher "new"
        should render template matcher "new"
        should not save
    with non-admin user
      should redirect to root
  GET new
    with admin user
      should respond with 200
      sets category when one is passed through params
      assigns a new equipment model to @equipment_model
      should not set the flash
      should render template matcher "new"
      sets equipment_model to nil when no category is specified
    with non-admin user
      should redirect to root
  GET show
    with admin user
      should respond with 200
      should limit @associated_equipment_models to maximum 6
      should set to correct equipment model
      should not set the flash
      should render template matcher "show"
      should set @associated_equipment_models
    with non-admin user
      should funciton normally
        should respond with 200
        should render template matcher "show"
  PUT update
    with admin user
      calls delete_files (PENDING: Not yet implemented)
      with valid attributes
        example at ./spec/controllers/equipment_models_controller_spec.rb:215 (FAILED - 23)
        sets @equipment_model to selected model (FAILED - 24)
        example at ./spec/controllers/equipment_models_controller_spec.rb:223 (FAILED - 25)
        updates attributes (FAILED - 26)
      without valid attributes
        should not set the flash
        should not update attributes
        should render template matcher "edit"
    with non-admin user
      should redirect to root
  GET edit
    with admin user
      should respond with 200
      should render template matcher "edit"
      sets @equipment_model to selected model
      should not set the flash
    with non-admin user
      should redirect to root

CheckoutProcedure
  should belong to equipment_model

TestController
  app_setup_check
    user and appconfig in the db
      should respond with 200
      should render template matcher {:text=>"hello world"}
      should not set the flash
    no app_config
      should set the flash
      should render template matcher ["layouts/application", "application_setup/index"]
    no user in the db
      should set the flash
      should render template matcher ["layouts/application", "application_setup/index"]
  fix_cart_date
    changes cart.start_date to today if date is in the past
    does not change the start_date if date is in the future
  cart
    makes a new cart record for session[:cart] if !cart
    returns session[:cart] if cart.reserver_id
    returns session[:cart] without a reserver_id if !cart.reserver_id && !current_user
    sets the session[:cart].reserver_id to current_user.id if !cart.reserver_id && current_user
  seen_app_configs
    app configs have not been viewed
      should set the flash
      should respond with 300..399
      should redirect to "/app_configs"
    app configs have been viewed
      should not set the flash
      should respond with 200
      should not redirect to "/app_configs"
  first_time_user
    current_user exists
      should not set the flash
      should not redirect
    current_user is nil
      should set the flash
      should redirect to "/users/new"
      params[:action] = "terms_of_service"
        should not set the flash
        should not redirect
  require_admin
    admin user
      does nothing if admin in admin mode (PENDING: Not yet implemented)
    not an admin
      redirects to root url if not an admin and no parameter passed (PENDING: Not yet implemented)
      redirects to new_path if not an admin and new_path passed (PENDING: Not yet implemented)
      redirects to new path admin not in admin mode (PENDING: Not yet implemented)
  current_user
    @current_user already exists
      should return the current user
    @current_user does not already exist
      session[:cas_user] exists
        should find the current user based on the session :cas_user
      session[:cas_user] does not exist
        should return nil
  check_if_is_admin
    user is an admin
      should not set the flash
      should not redirect
    user is not an admin
      should set the flash
      should redirect to "where_i_came_from"
  load_configs
    should set @app_configs to the first AppConfig

EquipmentObject
  validations
    has a working factory
    should require name to be set
    saves an empty string value as nil for deleted_at field
    should require equipment_model to be set
  .current_reservation
    returns nil if the equipment object does not have an associted reservation
    returns the reservation object currently holding this equipment_object if there is one that does
  .status
    returns 'Deactivated' if the object has a value for deleted_at
    returns 'available' if the object is active and not currently checked out
    returns a description of the reservation that it is currently associated with if it is active and checked out
  .active
    Should return all active equipment objects
    Should not return inactive equipment objects
  .available?
    returns true if the equipment object is not checked out
    returns false if the equipment object is currently checked out

Message
  validations
    should require name to be set
    should allow email to be set to any of ["example@example.com", "1a@a.edu", "a@2a.net"]
    should require body to be set
    should require subject to be set
    should require email to be set
    should not allow email to be set to any of ["abc", "!s@abc.com", "a@!d.com", "a@a.c0m"]
  .persisted?
    should always return false

AnnouncementsHelper
  add some examples to (or delete) /home/s/Dropbox/code/STC/reservations/spec/helpers/announcements_helper_spec.rb (PENDING: No reason given)

Announcements
  displays active announcements (FAILED - 27)

CatalogController
  GET index
    sets @reserver_id to the current cart.reserver_id
    should respond with 200
    should not set the flash
    should render template matcher "index"
  PUT update_user_per_cat_page
    should set session[:user_per_cat_page] to session[:user_cat_items_per_page] if exists
    should not alter session[:user_per_cat_page] if session[:user_cat_items_per_page] is nil
    should render template matcher {:action=>"cat_pagination"}
    should redirect to "/"
  PUT remove_from_cart
    valid equipment_model selected
      should call cart.remove_item to remove item from cart
      should set flash[:error] to the result of Reservation.validate_set if exists
      should render template matcher {:action=>"update_cart"}
      should redirect to "/"
    invalid equipment_model selected
      should redirect to "/"
      should set the flash
      should add logger error (FAILED - 28)
  PUT add_to_cart
    valid equipment_model selected
      should call cart.add_item to add item to cart
      should set flash[:error] to the result of Reservation.validate_set if exists
      should render template matcher {:action=>"update_cart"}
      should redirect to "/"
    invalid equipment_model selected
      should redirect to "/"
      should set the flash
      should add logger error (FAILED - 29)
  PUT search
    query is blank
      should redirect to "/"
    query is not blank
      should call catalog_search on EquipmentModel and return active equipment models
      should call catalog_search on EquipmentObject
      should render template matcher {:action=>"search_results"}
      should call catalog_search on Category

CategoriesController
  GET index
    user is admin
      should populate an array of all categories if show deleted is true (FAILED - 30)
      should render template matcher "index"
      should respond with 200
      should populate an array of active categories if show deleted is nil or false (FAILED - 31)
      should not set the flash
    user is not admin
      should respond with 200
      should populate an array of all categories if show deleted is true (FAILED - 32)
      should not set the flash
      should render template matcher "index"
      should populate an array of active categories if show deleted is nil or false (FAILED - 33)
  DELETE destroy
    is admin
      assigns the selected category to @category
      removes @category from the database
      should redirect to the categorys index page
    not admin
      should redirect to root url
  GET edit
    is admin
      should set @category to the selected category
      should respond with 200
      should not set the flash
      should render template matcher "edit"
    not admin
      should redirect to root_url
  GET new
    is admin
      should respond with 200
      should render template matcher "new"
      assigns a new category to @category
      should not set the flash
    not admin
      should redirect to root_url
  GET show
    user is admin
      should respond with 200
      should render template matcher "show"
      should set @category to the selected category
      should not set the flash
    user is not admin
      should respond with 200
      should render template matcher "show"
      should set @category to the selected category
      should not set the flash
  PUT update
    is admin
      with valid attributes
        should set @category to the correct category
        should successfully save new attributes to the database
        should set the flash
        should redirect to #<Category id: 393, name: "Name798", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:14", updated_at: "2014-06-19 20:52:14", sort_order: 379, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>
      with invalid attributes
        should not update attributes of @category in the database
        should render template matcher "edit"
        should not set the flash
    not admin
      should redirect to root url
  POST create
    is admin
      with valid attributes
        saves a new category to the database
        should redirect to #<Category id: 402, name: "Name807", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:14", updated_at: "2014-06-19 20:52:14", sort_order: 392, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>
        should set the flash
      with invalid attributes
        fails to save a new category
        should set the flash
        should render template matcher "new"
    not admin
      should redirect to root url

AppConfigsController
  GET edit
    app_config exists already
      user is admin
        should render template matcher "edit"
        should respond with 200
        should assign @app_config variable to the first appconfig in the db
        should not set the flash
      user is not admin
        should redirect to "/"
    app_config does not exist yet
      should respond with 200 (FAILED - 34)
      should set the flash
      should render template matcher ["layouts/application", "application_setup/index"]
  POST update
    app config already exists
      user is admin
        assigns current configuration to @app_config (FAILED - 35)
        With valid parameters
          resets TOS status for all users when :reset_tos_for_users is 1
          maintains TOS status for all users when :reset_tos_for_users is not 1
          restores favicon when appropriate (PENDING: Not yet implemented)
      user is not admin
        should redirect to "/"
    app_config does not exist yet
      should respond with 200 (FAILED - 36)
      should set the flash
      should render template matcher ["layouts/application", "application_setup/index"]

ApplicationController
  PUT update_cart
    valid parameters
      should update cart dates
      should not set the flash
    invalid parameters
      should set the flash
  GET markdown_help
    should render template matcher "shared/_markdown_help"
  PUT deactivate
    should assign @objects_class2 to the object and controller specified by params (PENDING: Not yet implemented)
    should delete @objects_class2 (PENDING: Not yet implemented)
    should redirect to request.referer (PENDING: Not yet implemented)
    should set the flash (PENDING: Not yet implemented)
  GET logout
    should always set @current_user to nil
    should log the user out of CAS (PENDING: Not yet implemented)
  DELETE empty_cart
    destroys cart reservations for the reserver associated with the current cart
    sets the session[:cart] variable back to nil
    should set the flash
    should redirect to "/"
  PUT activate
    should assign @model_to_activate to the model to be activated (PENDING: Not yet implemented)
    should set the flash (PENDING: Not yet implemented)
    should revive @model_to_activate (PENDING: Not yet implemented)
    should call activatParents on the assigned model (PENDING: Not yet implemented)
    should redirect to request.referer (PENDING: Not yet implemented)
  GET terms_of_service
    should render template matcher "terms_of_service/index"
    assigns @app_config.terms_of_service to @tos

Announcement
  has current scope (FAILED - 37)
  does not include ids passed in to current (FAILED - 38)
  includes current when nil is passed in (FAILED - 39)

CartReservation
  should belong to equipment_model
  should belong to reserver
  should require reserver to be set
  when valid
    should be valid
    can be updated
    should save
    should have a valid reserver
    passes custom validations
    equipment_model
      should not be nil
    start_date
      should not be nil
    due_date
      should not be nil
  when empty
    should not be valid
    should not save
    can be updated with equipment model
    cannot be updated
  with bad dates
    should not be valid
    should not save
    can be updated with fixed date
    cannot be updated

User
  has a working factory
  validations and associations
    should have many reservations
    should not allow email to be set to any of ["abc", "!s@abc.com", "a@!d.com", "a@a.c0m"]
    should require first_name to be set
    should have and belong to many requirements
    should require last_name to be set
    should require case sensitive unique value for login
    doesn't have to accept ToS if created by an admin
    should allow email to be set to any of ["example@example.com", "1a@a.edu", "a@2a.net"]
    should not allow nickname to be set to any of ["ab@", "ab1", "ab_c"]
    should require affiliation to be set
    must accept ToS
    should require email to be set
    should allow nickname to be set to any of [nil, "", "abc", "Example"]
    should require login to be set
  .name
    should return the nickname and last name joined into one string if nickname is specified
    should return the first and last name if user has no nickname specified
  .checked_out_models
    should return a hash of checked out models and counts
  .can_checkout?
    should return true if user is a checkout person
    should return false if admin in normal mode
    should return false if user is normal
    should return true if user is an admin in checkoutperson mode
    should return true if user is an admin in admin mode
    should return false if admin in bannedmode
    should return false if user is banned
  nickname
    should default to empty string
    should not allow nil
  .active
    should return all active users
    should not return inactive users
  #search_ldap
    should return a hash of user attributes if the ldap database has the login associated with user (PENDING: Not yet implemented)
    should return nil if the user is not in the ldap database (PENDING: Not yet implemented)
  #select_options
    should return an array of all users ordered by last name, each represented by an array like this: ['first_name last_name', id] (FAILED - 40)
  .is_admin?
    should return true if user is admin and passed no parameter
    not an admin
      should return false if user is not an admin and passed no parameter
      should return false if user is not admin and passed a parameter
    banned view_mode
      should return true if passed the parameter matching the view_mode
      should return false if passed a parameter not matching the view_mode
    checkout view_mode
      should return true if passed the parameter matching the view_mode
      should return false if passed a parameter not matching the view_mode
    admin view_mode
      should return true if passed the parameter matching the view_mode
      should return false if passed a parameter not matching the view_mode
    normal view_mode
      should return true if passed the parameter matching the view_mode
      should return false if passed a parameter not matching the view_mode
  .render_name
    should return the nickname, last name, and login id as a string if nickname exists
    should return the first name, last name, and login id as a string if no nickname
  .equipment_objects
    has a working reservation factory
    should return all equipment_objects reserved by the user

EquipmentModel
  basic validations
    requires an integer value for maximum renewal length
    requires a maximum per user value greater than or equal to 1
    should accepts_nested_attributes_for :checkout_procedures
    requires an integer value for renewal days before due
    allows nil values for maximum per user
    allows nil values for maximum renewal times
    requires a late fee greater than or equal to 0
    should have and belong to many associated_equipment_models
    requires a replacement fee greater than or equal to 0
    should require description to be set
    should accepts_nested_attributes_for :checkin_procedures
    should have many checkout_procedures
    requires a maximum renewal length value greater than or equal to 0
    should have and belong to many requirements
    requires an integer value for maximum renewal times
    requires a maximum renewal times value greater than or equal to 0
    should require name to be set
    has a working factory
    allows nil values for renewal days before due
    should have many reservations
    should have many checkin_procedures
    should belong to category
    should have many equipment_objects
    should require case sensitive unique value for name
    requires an integer value for maximum per user
    requires a renewal days before due value greater than or equal to 0
    allows nil values for maximum renewal length
    requires an associated category
  instance methods
    .maximum_per_user
      should return the max_per_user if specified
      should return the associated category's max_per_user if unspecified
    methods involving reservations
      .num_available
        should return the number of objects of that model available over a given date range
        should return 0 if no objects of that model are available
      .available_count
        should take the total # of the model, subtract the number reserved, checked-out, and overdue for the given date and return the result
      .number_overdue
        should return the number of objects of a given model that are checked out and overdue
      .number_reserved_on_date
        should return the number of objects of that model reserved on that date but not checked in
      .available_object_select_options
        should make a string listing the available objects
    .maximum_renewal_times
      should return the max_renewal_times if specified
      should return the associated category's max_renewal_length if unspecified
    .maximum_renewal_length
      should return the max_renewal_length if specified
      should return the associated category's max_renewal_length if unspecified
    .model_restricted?
      should return false if the user has fulfilled the requirements to use the model
      should return false if the model has no requirements
      should return true if the user has not fulfilled any of the requirements
      should return true if the user has not fulfilled all of the requirements
    .maximum_renewal_days_before_due
      should return the model's renewal_days_before_due if specified
      should return the associated category's renewal_days_before_due if unspecified
  class methods
    #catalog_search
      Should return equipment_models with all of the query words in either name or description
      Should not return any equipment_models without every query word in the name or description (FAILED - 41)
  association validations
    has a working association callback
    does not permit association with itself
    .not_associated_with_self
      creates an error if associated with self

Pending:
  Blackout validations and associations validates a set_id if it is a recurring blackout
    # Not yet implemented
    # ./spec/models/blackout_spec.rb:13
  EquipmentModelsController PUT update with admin user calls delete_files
    # Not yet implemented
    # ./spec/controllers/equipment_models_controller_spec.rb:236
  TestController require_admin admin user does nothing if admin in admin mode
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:266
  TestController require_admin not an admin redirects to root url if not an admin and no parameter passed
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:269
  TestController require_admin not an admin redirects to new_path if not an admin and new_path passed
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:270
  TestController require_admin not an admin redirects to new path admin not in admin mode
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:271
  AnnouncementsHelper add some examples to (or delete) /home/s/Dropbox/code/STC/reservations/spec/helpers/announcements_helper_spec.rb
    # No reason given
    # ./spec/helpers/announcements_helper_spec.rb:14
  AppConfigsController POST update app config already exists user is admin With valid parameters restores favicon when appropriate
    # Not yet implemented
    # ./spec/controllers/app_configs_controller_spec.rb:87
  ApplicationController PUT deactivate should assign @objects_class2 to the object and controller specified by params
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:378
  ApplicationController PUT deactivate should delete @objects_class2
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:379
  ApplicationController PUT deactivate should redirect to request.referer
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:381
  ApplicationController PUT deactivate should set the flash
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:380
  ApplicationController GET logout should log the user out of CAS
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:362
  ApplicationController PUT activate should assign @model_to_activate to the model to be activated
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:385
  ApplicationController PUT activate should set the flash
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:388
  ApplicationController PUT activate should revive @model_to_activate
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:387
  ApplicationController PUT activate should call activatParents on the assigned model
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:386
  ApplicationController PUT activate should redirect to request.referer
    # Not yet implemented
    # ./spec/controllers/application_controller_spec.rb:389
  User#search_ldap should return a hash of user attributes if the ldap database has the login associated with user
    # Not yet implemented
    # ./spec/models/user_spec.rb:223
  User#search_ldap should return nil if the user is not in the ldap database
    # Not yet implemented
    # ./spec/models/user_spec.rb:224

Failures:

  1) EquipmentObjectsController GET index with admin user without show deleted without @equipment_model set should populate an array of all active equipment objects
     Failure/Error: expect(assigns(:equipment_objects).size).to eq(2)
       
       expected: 2
            got: 13
       
       (compared using ==)
     # ./spec/controllers/equipment_objects_controller_spec.rb:38:in `block (6 levels) in <top (required)>'

  2) EquipmentObjectsController GET index with admin user with show deleted without @equipment_model set should populate an array of all equipment objects
     Failure/Error: expect(assigns(:equipment_objects).size).to eq(3)
       
       expected: 3
            got: 14
       
       (compared using ==)
     # ./spec/controllers/equipment_objects_controller_spec.rb:64:in `block (6 levels) in <top (required)>'

  3) Reservation when valid should save
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:30:in `block (3 levels) in <top (required)>'

  4) Reservation with equipment model quantity problems should not save
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:381:in `block (3 levels) in <top (required)>'

  5) Reservation when user has overdue reservation should not save
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:213:in `block (3 levels) in <top (required)>'

  6) Reservation with equipment object/model matching problems should not save
     Failure/Error: Reservation.all.size.should == 0
       expected: 0
            got: 1 (using ==)
     # ./spec/models/reservation_spec.rb:278:in `block (3 levels) in <top (required)>'

  7) Reservation when empty should not save
     Failure/Error: Reservation.all.size.should == 0
       expected: 0
            got: 1 (using ==)
     # ./spec/models/reservation_spec.rb:95:in `block (3 levels) in <top (required)>'

  8) Reservation when empty updates with equipment model
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:121:in `block (3 levels) in <top (required)>'

  9) Reservation with category quantity problems should not save
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:345:in `block (3 levels) in <top (required)>'

  10) Reservation with past due date updates with fixed date
     Failure/Error: Reservation.all.size.should == 1
       expected: 1
            got: 2 (using ==)
     # ./spec/models/reservation_spec.rb:157:in `block (3 levels) in <top (required)>'

  11) Reservation with past due date should not save
     Failure/Error: Reservation.all.size.should == 0
       expected: 0
            got: 1 (using ==)
     # ./spec/models/reservation_spec.rb:131:in `block (3 levels) in <top (required)>'

  12) Reservation with duration problems should not save
     Failure/Error: Reservation.all.size.should == 0
       expected: 0
            got: 1 (using ==)
     # ./spec/models/reservation_spec.rb:311:in `block (3 levels) in <top (required)>'

  13) Reservation with blacked out start date should not save
     Failure/Error: Reservation.all.size.should == 0
       expected: 0
            got: 1 (using ==)
     # ./spec/models/reservation_spec.rb:167:in `block (3 levels) in <top (required)>'

  14) Requirement Validations has a working factory
     Failure/Error: @requirement.save.should be_true
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '1' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:48', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 1, NULL, '2014-06-19 20:51:48')
     # ./spec/models/requirement_spec.rb:9:in `block (3 levels) in <top (required)>'

  15) Requirement#list_requirement_admins should return a list of admins and contact info if no requirements have been met.
     Failure/Error: @requirement = FactoryGirl.create(:requirement)
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '7' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:48', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 7, NULL, '2014-06-19 20:51:48')
     # ./spec/models/requirement_spec.rb:21:in `block (3 levels) in <top (required)>'

  16) Requirement#list_requirement_admins should return a list of met requirements, followed by unmet requirements if they exists
     Failure/Error: @requirement = FactoryGirl.create(:requirement)
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '8' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:48', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 8, NULL, '2014-06-19 20:51:48')
     # ./spec/models/requirement_spec.rb:21:in `block (3 levels) in <top (required)>'

  17) RequirementsController GET index is admin 
     Failure/Error: @requirement = FactoryGirl.create(:requirement, contact_name: "Adam Bray")
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '9' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:49', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 9, NULL, '2014-06-19 20:51:49')
     # ./spec/controllers/requirements_controller_spec.rb:11:in `block (2 levels) in <top (required)>'

  18) RequirementsController GET index is admin 
     Failure/Error: @requirement = FactoryGirl.create(:requirement, contact_name: "Adam Bray")
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '10' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:49', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 10, NULL, '2014-06-19 20:51:49')
     # ./spec/controllers/requirements_controller_spec.rb:11:in `block (2 levels) in <top (required)>'

  19) RequirementsController GET index is admin should populate an array of all requirements
     Failure/Error: @requirement = FactoryGirl.create(:requirement, contact_name: "Adam Bray")
     ActiveRecord::RecordNotUnique:
       Mysql2::Error: Duplicate entry '11' for key 'PRIMARY': INSERT INTO `requirements` (`contact_info`, `contact_name`, `created_at`, `deleted_at`, `description`, `equipment_model_id`, `id`, `notes`, `updated_at`) VALUES ('adam.bray@yale.edu', 'Adam Bray', '2014-06-19 20:51:49', NULL, 'You must attend a training session with Adam before using this equipment.', NULL, 11, NULL, '2014-06-19 20:51:49')
     # ./spec/controllers/requirements_controller_spec.rb:11:in `block (2 levels) in <top (required)>'

  20) ContactController POST create with valid attributes sends a message
     Failure/Error: ActionMailer::Base.deliveries.last.subject.should eq('[Reservations Specs] ' + FactoryGirl.build(:message).subject)
       
       expected: "[Reservations Specs] Message"
            got: "[Reservations] Message"
       
       (compared using ==)
     # ./spec/controllers/contact_controller_spec.rb:33:in `block (4 levels) in <top (required)>'

  21) EquipmentModelsController GET index with admin user without show deleted without @category set should populate an array of all active equipment models
     Failure/Error: expect(assigns(:equipment_models).size).to eq(2)
       
       expected: 2
            got: 3
       
       (compared using ==)
     # ./spec/controllers/equipment_models_controller_spec.rb:38:in `block (6 levels) in <top (required)>'

  22) EquipmentModelsController GET index with admin user with show deleted without @category set should populate an array of all equipment models
     Failure/Error: expect(assigns(:equipment_models).size).to eq(3)
       
       expected: 3
            got: 4
       
       (compared using ==)
     # ./spec/controllers/equipment_models_controller_spec.rb:64:in `block (6 levels) in <top (required)>'

  23) EquipmentModelsController PUT update with admin user with valid attributes 
     Failure/Error: before { put :update, id: model, equipment_model:
     NoMethodError:
       undefined method `each' for nil:NilClass
     # ./app/controllers/equipment_models_controller.rb:92:in `delete_procedures'
     # ./app/controllers/equipment_models_controller.rb:71:in `update'
     # ./spec/controllers/equipment_models_controller_spec.rb:213:in `block (5 levels) in <top (required)>'

  24) EquipmentModelsController PUT update with admin user with valid attributes sets @equipment_model to selected model
     Failure/Error: before { put :update, id: model, equipment_model:
     NoMethodError:
       undefined method `each' for nil:NilClass
     # ./app/controllers/equipment_models_controller.rb:92:in `delete_procedures'
     # ./app/controllers/equipment_models_controller.rb:71:in `update'
     # ./spec/controllers/equipment_models_controller_spec.rb:213:in `block (5 levels) in <top (required)>'

  25) EquipmentModelsController PUT update with admin user with valid attributes 
     Failure/Error: before { put :update, id: model, equipment_model:
     NoMethodError:
       undefined method `each' for nil:NilClass
     # ./app/controllers/equipment_models_controller.rb:92:in `delete_procedures'
     # ./app/controllers/equipment_models_controller.rb:71:in `update'
     # ./spec/controllers/equipment_models_controller_spec.rb:213:in `block (5 levels) in <top (required)>'

  26) EquipmentModelsController PUT update with admin user with valid attributes updates attributes
     Failure/Error: before { put :update, id: model, equipment_model:
     NoMethodError:
       undefined method `each' for nil:NilClass
     # ./app/controllers/equipment_models_controller.rb:92:in `delete_procedures'
     # ./app/controllers/equipment_models_controller.rb:71:in `update'
     # ./spec/controllers/equipment_models_controller_spec.rb:213:in `block (5 levels) in <top (required)>'

  27) Announcements displays active announcements
     Failure/Error: visit '/catalog'
     NoMethodError:
       undefined method `gsub' for nil:NilClass
     # ./app/models/user.rb:105:in `search_ldap'
     # ./app/controllers/users_controller.rb:54:in `new'
     # ./spec/requests/announcements_spec.rb:7:in `block (2 levels) in <top (required)>'

  28) CatalogController PUT remove_from_cart invalid equipment_model selected should add logger error
     Failure/Error: Rails.logger.should_receive(:error).with("Attempt to add invalid equipment model #{1}")
       (#<ActiveSupport::TaggedLogging:0x00000005408ee0>).error("Attempt to add invalid equipment model 1")
           expected: 1 time with arguments: ("Attempt to add invalid equipment model 1")
           received: 0 times with arguments: ("Attempt to add invalid equipment model 1")
     # ./spec/controllers/catalog_controller_spec.rb:81:in `block (4 levels) in <top (required)>'

  29) CatalogController PUT add_to_cart invalid equipment_model selected should add logger error
     Failure/Error: Rails.logger.should_receive(:error).with("Attempt to add invalid equipment model #{1}")
       (#<ActiveSupport::TaggedLogging:0x00000005408ee0>).error("Attempt to add invalid equipment model 1")
           expected: 1 time with arguments: ("Attempt to add invalid equipment model 1")
           received: 0 times with arguments: ("Attempt to add invalid equipment model 1")
     # ./spec/controllers/catalog_controller_spec.rb:49:in `block (4 levels) in <top (required)>'

  30) CategoriesController GET index user is admin should populate an array of all categories if show deleted is true
     Failure/Error: expect(assigns(:categories)).to eq([@category, @inactive_category])
       
       expected: [#<Category id: 348, name: "Name753", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 331, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>, #<Category id: 349, name: "Name754", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 332, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
            got: [#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 348, name: "Name753", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 331, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>, #<Category id: 349, name: "Name754", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 332, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       
       (compared using ==)
       
       Diff:
       @@ -1,3 +1,4 @@
       -[#<Category id: 348, name: "Name753", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 331, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>,
       +[#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>,
       + #<Category id: 348, name: "Name753", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 331, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>,
         #<Category id: 349, name: "Name754", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 332, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
     # ./spec/controllers/categories_controller_spec.rb:23:in `block (4 levels) in <top (required)>'

  31) CategoriesController GET index user is admin should populate an array of active categories if show deleted is nil or false
     Failure/Error: expect(assigns(:categories)).to eq([@category])
       
       expected: [#<Category id: 354, name: "Name759", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 337, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
            got: [#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 354, name: "Name759", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 337, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,2 @@
       -[#<Category id: 354, name: "Name759", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 337, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       +[#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 354, name: "Name759", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:10", updated_at: "2014-06-19 20:52:10", sort_order: 337, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
     # ./spec/controllers/categories_controller_spec.rb:26:in `block (4 levels) in <top (required)>'

  32) CategoriesController GET index user is not admin should populate an array of all categories if show deleted is true
     Failure/Error: expect(assigns(:categories)).to eq([@category, @inactive_category])
       
       expected: [#<Category id: 360, name: "Name765", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 343, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>, #<Category id: 361, name: "Name766", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 344, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
            got: [#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 360, name: "Name765", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 343, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>, #<Category id: 361, name: "Name766", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 344, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       
       (compared using ==)
       
       Diff:
       @@ -1,3 +1,4 @@
       -[#<Category id: 360, name: "Name765", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 343, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>,
       +[#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>,
       + #<Category id: 360, name: "Name765", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 343, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>,
         #<Category id: 361, name: "Name766", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 344, deleted_at: "2014-06-18 04:00:00", max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
     # ./spec/controllers/categories_controller_spec.rb:42:in `block (4 levels) in <top (required)>'

  33) CategoriesController GET index user is not admin should populate an array of active categories if show deleted is nil or false
     Failure/Error: expect(assigns(:categories)).to eq([@category])
       
       expected: [#<Category id: 366, name: "Name771", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 349, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
            got: [#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 366, name: "Name771", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 349, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,2 @@
       -[#<Category id: 366, name: "Name771", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 349, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
       +[#<Category id: 1, name: "Triostforge", max_per_user: 30, max_checkout_length: 25, created_at: "2014-06-19 20:25:01", updated_at: "2014-06-19 20:25:01", sort_order: 42, deleted_at: nil, max_renewal_times: 4, max_renewal_length: 21, renewal_days_before_due: 7465>, #<Category id: 366, name: "Name771", max_per_user: nil, max_checkout_length: nil, created_at: "2014-06-19 20:52:11", updated_at: "2014-06-19 20:52:11", sort_order: 349, deleted_at: nil, max_renewal_times: nil, max_renewal_length: nil, renewal_days_before_due: nil>]
     # ./spec/controllers/categories_controller_spec.rb:45:in `block (4 levels) in <top (required)>'

  34) AppConfigsController GET edit app_config does not exist yet should respond with 200
     Failure/Error: it { should respond_with(:success) }
       Expected response to be a 200, but was 302
     # ./spec/controllers/app_configs_controller_spec.rb:43:in `block (4 levels) in <top (required)>'

  35) AppConfigsController POST update app config already exists user is admin assigns current configuration to @app_config
     Failure/Error: expect(assigns(:app_config)).to eq(@app_config)
       
       expected: #<AppConfig id: 79, upcoming_checkin_email_active: true, reservation_confirmation_email_active: true, site_title: "Reservations Specs", admin_email: "my@email.com", department_name: "MyString", contact_link_location: "MyString", home_link_text: "MyString", home_link_location: "MyString", default_per_cat_page: 1, upcoming_checkin_email_body: "MyText", overdue_checkin_email_body: "MyText", overdue_checkin_email_active: true, terms_of_service: "TOS", favicon_file_name: "favicon.ico", favicon_content_type: "image/vnd.microsoft.icon", favicon_file_size: 15, favicon_updated_at: "2013-06-24 18:02:01", delete_missed_reservations: true, deleted_missed_reservation_email_body: "MyText", send_notifications_for_deleted_missed_reservations: true, checkout_persons_can_edit: false, require_phone: true, viewed: true, override_on_create: false, override_at_checkout: false>
            got: #<AppConfig id: 1, upcoming_checkin_email_active: true, reservation_confirmation_email_active: true, site_title: "Reservations Specs", admin_email: "my@email.com", department_name: "MyString", contact_link_location: "MyString", home_link_text: "MyString", home_link_location: "MyString", default_per_cat_page: 1, upcoming_checkin_email_body: "MyText", overdue_checkin_email_body: "MyText", overdue_checkin_email_active: true, terms_of_service: "TOS", favicon_file_name: nil, favicon_content_type: nil, favicon_file_size: nil, favicon_updated_at: nil, delete_missed_reservations: true, deleted_missed_reservation_email_body: "MyText", send_notifications_for_deleted_missed_reservations: true, checkout_persons_can_edit: false, require_phone: true, viewed: true, override_on_create: false, override_at_checkout: false>
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,2 @@
       -#<AppConfig id: 79, upcoming_checkin_email_active: true, reservation_confirmation_email_active: true, site_title: "Reservations Specs", admin_email: "my@email.com", department_name: "MyString", contact_link_location: "MyString", home_link_text: "MyString", home_link_location: "MyString", default_per_cat_page: 1, upcoming_checkin_email_body: "MyText", overdue_checkin_email_body: "MyText", overdue_checkin_email_active: true, terms_of_service: "TOS", favicon_file_name: "favicon.ico", favicon_content_type: "image/vnd.microsoft.icon", favicon_file_size: 15, favicon_updated_at: "2013-06-24 18:02:01", delete_missed_reservations: true, deleted_missed_reservation_email_body: "MyText", send_notifications_for_deleted_missed_reservations: true, checkout_persons_can_edit: false, require_phone: true, viewed: true, override_on_create: false, override_at_checkout: false>
       +#<AppConfig id: 1, upcoming_checkin_email_active: true, reservation_confirmation_email_active: true, site_title: "Reservations Specs", admin_email: "my@email.com", department_name: "MyString", contact_link_location: "MyString", home_link_text: "MyString", home_link_location: "MyString", default_per_cat_page: 1, upcoming_checkin_email_body: "MyText", overdue_checkin_email_body: "MyText", overdue_checkin_email_active: true, terms_of_service: "TOS", favicon_file_name: nil, favicon_content_type: nil, favicon_file_size: nil, favicon_updated_at: nil, delete_missed_reservations: true, deleted_missed_reservation_email_body: "MyText", send_notifications_for_deleted_missed_reservations: true, checkout_persons_can_edit: false, require_phone: true, viewed: true, override_on_create: false, override_at_checkout: false>
     # ./spec/controllers/app_configs_controller_spec.rb:63:in `block (5 levels) in <top (required)>'

  36) AppConfigsController POST update app_config does not exist yet should respond with 200
     Failure/Error: it { should respond_with(:success) }
       Expected response to be a 200, but was 302
     # ./spec/controllers/app_configs_controller_spec.rb:114:in `block (4 levels) in <top (required)>'

  37) Announcement has current scope
     Failure/Error: passed = Announcement.create! starts_at: 1.day.ago, ends_at: 1.hour.ago
     ActiveRecord::RecordInvalid:
       Validation failed: Message can't be blank
     # ./spec/models/announcement_spec.rb:6:in `block (2 levels) in <top (required)>'

  38) Announcement does not include ids passed in to current
     Failure/Error: current1 = Announcement.create! starts_at: 1.hour.ago, ends_at: 1.day.from_now
     ActiveRecord::RecordInvalid:
       Validation failed: Message can't be blank
     # ./spec/models/announcement_spec.rb:12:in `block (2 levels) in <top (required)>'

  39) Announcement includes current when nil is passed in
     Failure/Error: current = Announcement.create! starts_at: 1.hour.ago, ends_at: 1.day.from_now
     ActiveRecord::RecordInvalid:
       Validation failed: Message can't be blank
     # ./spec/models/announcement_spec.rb:18:in `block (2 levels) in <top (required)>'

  40) User#select_options should return an array of all users ordered by last name, each represented by an array like this: ['first_name last_name', id]
     Failure/Error: User.select_options.should == [["#{@user2.last_name}, #{@user2.first_name}", @user2.id],["#{@user1.last_name}, #{@user1.first_name}", @user1.id]]
       expected: [["Greene, Jessica", 487], ["Smith, Joseph", 486]]
            got: [["Greene, Jessica", 487], ["Smith, Joseph", 486], ["Spencer, Rafaela", 2], ["test, test", 1]] (using ==)
     # ./spec/models/user_spec.rb:231:in `block (3 levels) in <top (required)>'

  41) EquipmentModel class methods #catalog_search Should not return any equipment_models without every query word in the name or description
     Failure/Error: EquipmentModel.catalog_search("Craft beer sartorial four loko").should == [@another_model]
       expected: [#<EquipmentModel id: 362, name: "Tumblr hipster starbucks alternative music", description: "Craft beer sartorial four loko blog jean           ...", late_fee: #<BigDecimal:8a02280,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8a021b8,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 489, created_at: "2014-06-19 20:52:47", updated_at: "2014-06-19 20:52:47", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>]
            got: [#<EquipmentModel id: 1, name: "Sofunc Direct Side Transmitter 282", description: "Squid dreamcatcher synth Pitchfork mixtape. Sustain...", late_fee: #<BigDecimal:8667af8,'0.23681E3',18(18)>, replacement_fee: #<BigDecimal:8667a30,'0.18533E3',18(18)>, max_per_user: 1, active: true, category_id: 1, created_at: "2014-06-19 20:25:03", updated_at: "2014-06-19 20:25:03", deleted_at: nil, photo_file_name: "epson-powerlite.jpg", photo_content_type: "image/jpeg", photo_file_size: 75765, photo_updated_at: "2014-06-19 20:25:02", documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 35, max_renewal_length: 27, renewal_days_before_due: 3646>, #<EquipmentModel id: 362, name: "Tumblr hipster starbucks alternative music", description: "Craft beer sartorial four loko blog jean           ...", late_fee: #<BigDecimal:8667710,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8667698,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 489, created_at: "2014-06-19 20:52:47", updated_at: "2014-06-19 20:52:47", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>] (using ==)
       Diff:
       @@ -1,2 +1,3 @@
       -[#<EquipmentModel id: 362, name: "Tumblr hipster starbucks alternative music", description: "Craft beer sartorial four loko blog jean           ...", late_fee: #<BigDecimal:8f613e8,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8f61320,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 489, created_at: "2014-06-19 20:52:47", updated_at: "2014-06-19 20:52:47", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>]
       +[#<EquipmentModel id: 1, name: "Sofunc Direct Side Transmitter 282", description: "Squid dreamcatcher synth Pitchfork mixtape. Sustain...", late_fee: #<BigDecimal:8667af8,'0.23681E3',18(18)>, replacement_fee: #<BigDecimal:8667a30,'0.18533E3',18(18)>, max_per_user: 1, active: true, category_id: 1, created_at: "2014-06-19 20:25:03", updated_at: "2014-06-19 20:25:03", deleted_at: nil, photo_file_name: "epson-powerlite.jpg", photo_content_type: "image/jpeg", photo_file_size: 75765, photo_updated_at: "2014-06-19 20:25:02", documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 35, max_renewal_length: 27, renewal_days_before_due: 3646>,
       + #<EquipmentModel id: 362, name: "Tumblr hipster starbucks alternative music", description: "Craft beer sartorial four loko blog jean           ...", late_fee: #<BigDecimal:8667710,'0.375E2',18(18)>, replacement_fee: #<BigDecimal:8667698,'0.2E2',9(18)>, max_per_user: 10, active: true, category_id: 489, created_at: "2014-06-19 20:52:47", updated_at: "2014-06-19 20:52:47", deleted_at: nil, photo_file_name: nil, photo_content_type: nil, photo_file_size: nil, photo_updated_at: nil, documentation_file_name: nil, documentation_content_type: nil, documentation_file_size: nil, documentation_updated_at: nil, max_renewal_times: 10, max_renewal_length: 10, renewal_days_before_due: 10>]
     # ./spec/models/equipment_model_spec.rb:172:in `block (4 levels) in <top (required)>'

Finished in 1 minute 20.3 seconds
599 examples, 41 failures, 20 pending

Failed examples:

rspec ./spec/controllers/equipment_objects_controller_spec.rb:34 # EquipmentObjectsController GET index with admin user without show deleted without @equipment_model set should populate an array of all active equipment objects
rspec ./spec/controllers/equipment_objects_controller_spec.rb:59 # EquipmentObjectsController GET index with admin user with show deleted without @equipment_model set should populate an array of all equipment objects
rspec ./spec/models/reservation_spec.rb:28 # Reservation when valid should save
rspec ./spec/models/reservation_spec.rb:379 # Reservation with equipment model quantity problems should not save
rspec ./spec/models/reservation_spec.rb:211 # Reservation when user has overdue reservation should not save
rspec ./spec/models/reservation_spec.rb:276 # Reservation with equipment object/model matching problems should not save
rspec ./spec/models/reservation_spec.rb:93 # Reservation when empty should not save
rspec ./spec/models/reservation_spec.rb:117 # Reservation when empty updates with equipment model
rspec ./spec/models/reservation_spec.rb:343 # Reservation with category quantity problems should not save
rspec ./spec/models/reservation_spec.rb:153 # Reservation with past due date updates with fixed date
rspec ./spec/models/reservation_spec.rb:129 # Reservation with past due date should not save
rspec ./spec/models/reservation_spec.rb:309 # Reservation with duration problems should not save
rspec ./spec/models/reservation_spec.rb:165 # Reservation with blacked out start date should not save
rspec ./spec/models/requirement_spec.rb:8 # Requirement Validations has a working factory
rspec ./spec/models/requirement_spec.rb:28 # Requirement#list_requirement_admins should return a list of admins and contact info if no requirements have been met.
rspec ./spec/models/requirement_spec.rb:35 # Requirement#list_requirement_admins should return a list of met requirements, followed by unmet requirements if they exists
rspec ./spec/controllers/requirements_controller_spec.rb:19 # RequirementsController GET index is admin 
rspec ./spec/controllers/requirements_controller_spec.rb:20 # RequirementsController GET index is admin 
rspec ./spec/controllers/requirements_controller_spec.rb:22 # RequirementsController GET index is admin should populate an array of all requirements
rspec ./spec/controllers/contact_controller_spec.rb:32 # ContactController POST create with valid attributes sends a message
rspec ./spec/controllers/equipment_models_controller_spec.rb:34 # EquipmentModelsController GET index with admin user without show deleted without @category set should populate an array of all active equipment models
rspec ./spec/controllers/equipment_models_controller_spec.rb:59 # EquipmentModelsController GET index with admin user with show deleted without @category set should populate an array of all equipment models
rspec ./spec/controllers/equipment_models_controller_spec.rb:215 # EquipmentModelsController PUT update with admin user with valid attributes 
rspec ./spec/controllers/equipment_models_controller_spec.rb:216 # EquipmentModelsController PUT update with admin user with valid attributes sets @equipment_model to selected model
rspec ./spec/controllers/equipment_models_controller_spec.rb:223 # EquipmentModelsController PUT update with admin user with valid attributes 
rspec ./spec/controllers/equipment_models_controller_spec.rb:219 # EquipmentModelsController PUT update with admin user with valid attributes updates attributes
rspec ./spec/requests/announcements_spec.rb:4 # Announcements displays active announcements
rspec ./spec/controllers/catalog_controller_spec.rb:80 # CatalogController PUT remove_from_cart invalid equipment_model selected should add logger error
rspec ./spec/controllers/catalog_controller_spec.rb:48 # CatalogController PUT add_to_cart invalid equipment_model selected should add logger error
rspec ./spec/controllers/categories_controller_spec.rb:21 # CategoriesController GET index user is admin should populate an array of all categories if show deleted is true
rspec ./spec/controllers/categories_controller_spec.rb:25 # CategoriesController GET index user is admin should populate an array of active categories if show deleted is nil or false
rspec ./spec/controllers/categories_controller_spec.rb:40 # CategoriesController GET index user is not admin should populate an array of all categories if show deleted is true
rspec ./spec/controllers/categories_controller_spec.rb:44 # CategoriesController GET index user is not admin should populate an array of active categories if show deleted is nil or false
rspec ./spec/controllers/app_configs_controller_spec.rb:43 # AppConfigsController GET edit app_config does not exist yet should respond with 200
rspec ./spec/controllers/app_configs_controller_spec.rb:61 # AppConfigsController POST update app config already exists user is admin assigns current configuration to @app_config
rspec ./spec/controllers/app_configs_controller_spec.rb:114 # AppConfigsController POST update app_config does not exist yet should respond with 200
rspec ./spec/models/announcement_spec.rb:5 # Announcement has current scope
rspec ./spec/models/announcement_spec.rb:11 # Announcement does not include ids passed in to current
rspec ./spec/models/announcement_spec.rb:17 # Announcement includes current when nil is passed in
rspec ./spec/models/user_spec.rb:228 # User#select_options should return an array of all users ordered by last name, each represented by an array like this: ['first_name last_name', id]
rspec ./spec/models/equipment_model_spec.rb:169 # EquipmentModel class methods #catalog_search Should not return any equipment_models without every query word in the name or description

Randomized with seed 50675

